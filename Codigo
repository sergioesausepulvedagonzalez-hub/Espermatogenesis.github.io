<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Espermatog√©nesis - Realidad Aumentada</title>
    <style>
        body {
            background: linear-gradient(45deg, rgba(152, 29, 151, 1) 40%, rgba(41, 41, 41, 1) 65%, rgba(252, 176, 69, 1) 80%);
            color: #333;
            font-family: 'Helvetica Neue', Arial, sans-serif;
            line-height: 1.6;
            margin: 0;
            padding: 20px;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            min-height: 100vh;
        }

        .titulo-con-imagenes {
            display: flex;
            flex-direction: column;
            align-items: center;
            text-align: center;
            margin-bottom: 20px;
            gap: 20px;
        }

        .titulo-con-imagenes img {
            width: 120px;
            height: auto;
            border-radius: 15px;
        }

        h1 {
            font-size: 2.8em;
            color: #2c3e50;
            text-transform: uppercase;
            letter-spacing: 2px;
            margin-top: 10px;
            margin-bottom: 0;
        }

        h2, h3 {
            font-size: 1.5em;
            color: #34495e;
            margin: 5px 0;
            font-family: 'Cottonwood','Fantasy';
        }

        #info {
            max-width: 800px;
            width: 90%;
            background-color: #fff;
            border-radius: 15px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
            padding: 30px;
            text-align: center;
        }

        p {
            font-size: 1.1em;
            text-align: justify;
            margin: 15px 0;
            color: #555;
        }

        button {
            background-color: #3498db;
            color: #fff;
            border: none;
            padding: 15px 30px;
            font-size: 1.2em;
            font-weight: bold;
            border-radius: 50px;
            cursor: pointer;
            transition: background-color 0.3s ease, transform 0.2s ease;
            margin-top: 20px;
            box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2);
        }

        button:hover {
            background-color: #2980b9;
            transform: scale(1.05);
        }

        #ar-container {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            display: none;
            z-index: 1000;
        }

        #controls {
            position: fixed;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            display: none;
            z-index: 1001;
            gap: 10px;
        }

        .ar-active #ar-container,
        .ar-active #controls {
            display: flex;
        }

        .ar-active #info {
            display: none;
        }

        @media (max-width: 768px) {
            .titulo-con-imagenes {
                flex-direction: column;
                gap: 20px;
            }
            .titulo-con-imagenes img {
                width: 100px;
            }
            h1 {
                font-size: 2em;
            }
            #info {
                padding: 20px;
            }
        }
    </style>

    <!-- A-Frame -->
    <script src="https://aframe.io/releases/1.6.0/aframe.min.js"></script>
    <!-- AR.js -->
    <script src="https://raw.githack.com/AR-js-org/AR.js/master/aframe/build/aframe-ar.js"></script>
    <!-- Animation Mixer -->
    <script src="https://cdn.jsdelivr.net/npm/aframe-extras@7.0.0/dist/aframe-extras.min.js"></script>
</head>
<body>
    <!-- Pantalla de informaci√≥n -->
    <div id="info">
        <div class="titulo-con-imagenes">
            <img src="https://github.com/Jesus-2705/prueba.github.io/blob/main/imagenes/medicina%20logo.png?raw=true" alt="Logo Medicina">
            <h1>Espermatog√©nesis</h1>
            <img src="https://github.com/Jesus-2705/prueba.github.io/blob/main/imagenes/univesidad%20logo.png?raw=true" alt="Logo Universidad">
        </div>
        <h2>Museo de Embriolog√≠a</h2>
        <h3>Universidad Aut√≥noma de Chihuahua</h3>
        <p>La embriolog√≠a es el estudio del desarrollo de un embri√≥n desde la fecundaci√≥n del √≥vulo hasta la octava semana de gestaci√≥n. Este campo cient√≠fico es fundamental para comprender c√≥mo se forman los organismos y las estructuras celulares b√°sicas que dan origen a la vida.</p>
        <p>Con esta aplicaci√≥n usted podr√° obtener una experiencia de realidad aumentada donde podr√° ver modelos 3D animados de la espermatog√©nesis. Simplemente inicie la c√°mara y apunte al marcador Hiro para visualizar el contenido.</p>
        <p><strong>Instrucciones:</strong> Haga clic en el bot√≥n inferior para activar la c√°mara. Cuando vea la imagen, apunte hacia el marcador Hiro (un cuadrado negro con borde) para visualizar el modelo 3D.</p>
        <button id="start-ar">Iniciar Realidad Aumentada</button>
    </div>

    <!-- Contenedor para la escena AR (se crear√° din√°micamente) -->
    <div id="ar-container"></div>

    <!-- Controles AR -->
    <div id="controls">
        <button id="exit-ar">Salir de Realidad Aumentada</button>
    </div>

    <script>
        let arSceneCreated = false;
        let currentScene = null;

        // Referencias a elementos
        const startBtn = document.getElementById('start-ar');
        const exitBtn = document.getElementById('exit-ar');
        const body = document.body;
        const arContainer = document.getElementById('ar-container');

        // Funci√≥n para crear la escena AR din√°micamente
        function createARScene() {
            // Limpiar contenedor
            arContainer.innerHTML = '';

            // Crear la escena
            const scene = document.createElement('a-scene');
            scene.setAttribute('embedded', '');
            scene.setAttribute('arjs', 'sourceType: webcam; debugUIEnabled: false;');

            // Crear el marcador
            const marker = document.createElement('a-marker');
            marker.setAttribute('preset', 'hiro');

            // Crear el modelo 3D con animaci√≥n
            const model = document.createElement('a-entity');
            model.setAttribute('position', '0 0 0');
            model.setAttribute('rotation', '0 0 0');
            model.setAttribute('scale', '1.0 1.0 1.0');
            model.setAttribute('gltf-model', 'https://cdn.jsdelivr.net/gh/KhronosGroup/glTF-Sample-Models@master/2.0/BoxAnimated/glTF-Binary/BoxAnimated.glb');
            model.setAttribute('animation-mixer', '');

            // Para usar tu propio modelo, descomenta estas l√≠neas y comenta las anteriores:
            // model.setAttribute('gltf-model', 'url(modeloprueba.glb)');
            // model.setAttribute('scale', '0.5 0.5 0.5');

            // Crear la c√°mara
            const camera = document.createElement('a-entity');
            camera.setAttribute('camera', '');

            // Ensamblar la escena
            marker.appendChild(model);
            scene.appendChild(marker);
            scene.appendChild(camera);
            arContainer.appendChild(scene);

            // Eventos del marcador
            marker.addEventListener('markerFound', () => {
                console.log('‚úÖ Marcador detectado');
            });

            marker.addEventListener('markerLost', () => {
                console.log('‚ùå Marcador perdido');
            });

            currentScene = scene;
            arSceneCreated = true;
        }

        // Funci√≥n para destruir la escena AR
        function destroyARScene() {
            if (!currentScene) return;

            // Detener todos los media streams primero
            navigator.mediaDevices.enumerateDevices().then(devices => {
                devices.forEach(device => {
                    if (device.kind === 'videoinput') {
                        navigator.mediaDevices.getUserMedia({ video: true })
                            .then(stream => {
                                stream.getTracks().forEach(track => {
                                    track.stop();
                                });
                            })
                            .catch(() => {});
                    }
                });
            });

            // Detener todos los streams de video en los elementos
            const videos = document.querySelectorAll('video');
            videos.forEach(video => {
                // Pausar el video
                video.pause();
                
                // Detener todos los tracks
                if (video.srcObject) {
                    const tracks = video.srcObject.getTracks();
                    tracks.forEach(track => {
                        track.stop();
                        console.log('üõë Track de video detenido:', track.label);
                    });
                    video.srcObject = null;
                }
                
                // Remover el elemento
                video.remove();
            });

            // Si existe el sistema arjs, detenerlo
            if (currentScene.systems && currentScene.systems.arjs) {
                try {
                    const arSystem = currentScene.systems.arjs;
                    if (arSystem.tick) {
                        arSystem.tick = function() {}; // Detener el loop
                    }
                } catch (e) {
                    console.log('Error al detener arjs:', e);
                }
            }

            // Remover todos los event listeners
            const marker = currentScene.querySelector('a-marker');
            if (marker) {
                marker.removeEventListener('markerFound', () => {});
                marker.removeEventListener('markerLost', () => {});
            }

            // Limpiar el contenedor completamente
            arContainer.innerHTML = '';
            currentScene = null;
            arSceneCreated = false;
            
            console.log('üî¥ Escena AR destruida y c√°mara apagada');
        }

        // Iniciar AR
        startBtn.addEventListener('click', () => {
            console.log('üöÄ Iniciando Realidad Aumentada...');
            
            // Crear la escena AR
            createARScene();
            
            // Mostrar la vista AR
            body.classList.add('ar-active');
        });

        // Salir de AR
        exitBtn.addEventListener('click', () => {
            console.log('üö™ Saliendo de Realidad Aumentada...');
            
            // Primero destruir la escena y detener la c√°mara
            destroyARScene();
            
            // Dar un peque√±o delay para asegurar que todo se limpie
            setTimeout(() => {
                // Luego ocultar la vista AR y mostrar la pantalla inicial
                body.classList.remove('ar-active');
            }, 100);
        });
    </script>
</body>
</html>
